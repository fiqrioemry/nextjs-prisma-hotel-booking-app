generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------- ENUM --------------------
enum RoleEnum {
  ADMIN
  USER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  QRIS
  CASH
  BANK_TRANSFER
}

enum status {
  PENDING
  FAILED
  PAID
}

// -------------------- USER --------------------
model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          RoleEnum @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  profile  Profile?
  bookings Booking[]
  payments Payment[]
  sessions Session[]
  accounts Account[]
}

enum GenderEnum {
  MALE
  FEMALE
}


model Profile {
  id            String   @id @default(cuid())
  userId        String   @unique
  bio           String?
  phone         String?
  address       String?
  gender        GenderEnum?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}


// -------------------- HOTEL & ROOM --------------------
model Hotel {
  id        String   @id @default(cuid())
  name      String
  location  String
  description String
  thumbnail String
  address   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms Room[]
}


model Room {
  id          String   @id @default(cuid())
  hotelId     String
  name        String
  facilities  String[]
  description String
  typeId      String  

  price       Int
  capacity    Int
  totalUnits  Int    
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt


  type      RoomType    @relation(fields: [typeId], references: [id])
  hotel    Hotel       @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  

  bookings Booking[]
  images   RoomImage[]
}

model RoomImage {
  id        String   @id @default(cuid())
  roomId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


model RoomType {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms     Room[]
}


// -------------------- BOOKING --------------------
model Booking {
  id         String        @id @default(cuid())
  userId     String
  roomId     String
  checkIn    DateTime
  checkOut   DateTime
  quantity   Int           @default(1)
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  payment Payment?
}

// -------------------- TRANSACTION / PAYMENT --------------------

model Payment {
  id            String        @id @default(cuid())
  userId        String
  bookingId     String?       @unique // tiap booking punya 1 payment
  invoiceNo     String        @unique
  amount        Float
  tax           Float         @default(0)
  status        status @default(PENDING)
  paymentMethod PaymentMethod @default(BANK_TRANSFER)
  paymentUrl    String?
  metadata      Json          @default("{}")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  booking Booking? @relation(fields: [bookingId], references: [id])
}

// -------------------- AUTH SUPPORT --------------------
model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now())
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}
