generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" 
  url      = env("DATABASE_URL")
}

// =========================================
// BAWAAN BetterAuth
// =========================================
model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  accountsFinance  AccountFinance[]
  categories       Category[]
  transactions     Transaction[]
}

model Account {
  id                   String   @id @default(cuid())
  accountId            String
  providerId           String
  userId               String
  accessToken          String?
  refreshToken         String?
  idToken              String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope                String?
  password             String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}

// =========================================
// MODUL KEUANGAN / TRANSAKSI
// =========================================
model AccountFinance {
  id        String       @id @default(cuid())
  name      String
  balance   Decimal      @default(0.0)
  currency  String       @default("IDR")
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relasi
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Category {
  id        String       @id @default(cuid())
  name      String
  type      CategoryType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  // Relasi
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Decimal
  type        TransactionType
  note        String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relasi
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountId   String
  account     AccountFinance  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  categoryId  String?
  category    Category?       @relation(fields: [categoryId], references: [id])
}

// ENUMS
enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

enum CategoryType {
  INCOME
  EXPENSE
}
